//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi;
using Substrate.NetApi.Model.Extrinsics;
using Substrate.NetApi.Model.Meta;
using Substrate.NetApi.Model.Types;
using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;


namespace Substrate.NodeTemplate.NET.NetApiExt.Generated.Storage
{
    
    
    /// <summary>
    /// >> TemplateModuleStorage
    /// </summary>
    public sealed class TemplateModuleStorage
    {
        
        // Substrate client for the storage calls.
        private SubstrateClientExt _client;
        
        /// <summary>
        /// >> TemplateModuleStorage Constructor
        /// </summary>
        public TemplateModuleStorage(SubstrateClientExt client)
        {
            this._client = client;
            _client.StorageKeyDict.Add(new System.Tuple<string, string>("TemplateModule", "Something"), new System.Tuple<Substrate.NetApi.Model.Meta.Storage.Hasher[], System.Type, System.Type>(null, null, typeof(Substrate.NetApi.Model.Types.Primitive.U32)));
        }
        
        /// <summary>
        /// >> SomethingParams
        ///  A storage item for this pallet.
        /// 
        ///  In this template, we are declaring a storage item called `Something` that stores a single
        ///  `u32` value. Learn more about runtime storage here: <https://docs.substrate.io/build/runtime-storage/>
        /// </summary>
        public static string SomethingParams()
        {
            return RequestGenerator.GetStorage("TemplateModule", "Something", Substrate.NetApi.Model.Meta.Storage.Type.Plain);
        }
        
        /// <summary>
        /// >> SomethingDefault
        /// Default value as hex string
        /// </summary>
        public static string SomethingDefault()
        {
            return "0x00";
        }
        
        /// <summary>
        /// >> Something
        ///  A storage item for this pallet.
        /// 
        ///  In this template, we are declaring a storage item called `Something` that stores a single
        ///  `u32` value. Learn more about runtime storage here: <https://docs.substrate.io/build/runtime-storage/>
        /// </summary>
        public async Task<Substrate.NetApi.Model.Types.Primitive.U32> Something(string blockhash, CancellationToken token)
        {
            string parameters = TemplateModuleStorage.SomethingParams();
            var result = await _client.GetStorageAsync<Substrate.NetApi.Model.Types.Primitive.U32>(parameters, blockhash, token);
            return result;
        }
    }
    
    /// <summary>
    /// >> TemplateModuleCalls
    /// </summary>
    public sealed class TemplateModuleCalls
    {
        
        /// <summary>
        /// >> do_something
        /// The pallet's dispatchable functions ([`Call`]s).
        /// 
        /// Dispatchable functions allows users to interact with the pallet and invoke state changes.
        /// These functions materialize as "extrinsics", which are often compared to transactions.
        /// They must always return a `DispatchResult` and be annotated with a weight and call index.
        /// 
        /// The [`call_index`] macro is used to explicitly
        /// define an index for calls in the [`Call`] enum. This is useful for pallets that may
        /// introduce new dispatchables over time. If the order of a dispatchable changes, its index
        /// will also change which will break backwards compatibility.
        /// 
        /// The [`weight`] macro is used to assign a weight to each call.
        /// </summary>
        public static Method DoSomething(Substrate.NetApi.Model.Types.Primitive.U32 something)
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            byteArray.AddRange(something.Encode());
            return new Method(7, "TemplateModule", 0, "do_something", byteArray.ToArray());
        }
        
        /// <summary>
        /// >> cause_error
        /// The pallet's dispatchable functions ([`Call`]s).
        /// 
        /// Dispatchable functions allows users to interact with the pallet and invoke state changes.
        /// These functions materialize as "extrinsics", which are often compared to transactions.
        /// They must always return a `DispatchResult` and be annotated with a weight and call index.
        /// 
        /// The [`call_index`] macro is used to explicitly
        /// define an index for calls in the [`Call`] enum. This is useful for pallets that may
        /// introduce new dispatchables over time. If the order of a dispatchable changes, its index
        /// will also change which will break backwards compatibility.
        /// 
        /// The [`weight`] macro is used to assign a weight to each call.
        /// </summary>
        public static Method CauseError()
        {
            System.Collections.Generic.List<byte> byteArray = new List<byte>();
            return new Method(7, "TemplateModule", 1, "cause_error", byteArray.ToArray());
        }
    }
    
    /// <summary>
    /// >> TemplateModuleConstants
    /// </summary>
    public sealed class TemplateModuleConstants
    {
    }
    
    /// <summary>
    /// >> TemplateModuleErrors
    /// </summary>
    public enum TemplateModuleErrors
    {
        
        /// <summary>
        /// >> NoneValue
        /// The value retrieved was `None` as no value was previously set.
        /// </summary>
        NoneValue,
        
        /// <summary>
        /// >> StorageOverflow
        /// There was an attempt to increment the value in storage over `u32::MAX`.
        /// </summary>
        StorageOverflow,
    }
}
