//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Substrate.NetApi.Model.Types.Base;
using System.Collections.Generic;


namespace Substrate.NodeTemplate.NET.NetApiExt.Generated.Model.pallet_template.pallet
{
    
    
    /// <summary>
    /// >> Error
    /// Errors that can be returned by this pallet.
    /// 
    /// Errors tell users that something went wrong so it's important that their naming is
    /// informative. Similar to events, error documentation is added to a node's metadata so it's
    /// equally important that they have helpful documentation associated with them.
    /// 
    /// This type of runtime error can be up to 4 bytes in size should you want to return additional
    /// information.
    /// </summary>
    public enum Error
    {
        
        /// <summary>
        /// >> NoneValue
        /// The value retrieved was `None` as no value was previously set.
        /// </summary>
        NoneValue = 0,
        
        /// <summary>
        /// >> StorageOverflow
        /// There was an attempt to increment the value in storage over `u32::MAX`.
        /// </summary>
        StorageOverflow = 1,
    }
    
    /// <summary>
    /// >> 119 - Variant[pallet_template.pallet.Error]
    /// Errors that can be returned by this pallet.
    /// 
    /// Errors tell users that something went wrong so it's important that their naming is
    /// informative. Similar to events, error documentation is added to a node's metadata so it's
    /// equally important that they have helpful documentation associated with them.
    /// 
    /// This type of runtime error can be up to 4 bytes in size should you want to return additional
    /// information.
    /// </summary>
    public sealed class EnumError : BaseEnum<Error>
    {
    }
}
